<script>

    $$_data = {
        itemHelperCss: 'c-htrwhite2 mb-0005 rad-05 prm-t-h sec-t',
        itemDefaultCss: 'c-htrwhite2 mb-0005 rad-05 prm-t-h c-tblue'
    };

    $$_help = [
        { key: '[Drag]', value: 'View Projection Rotation ' },
        { key: 'Shift + [Drag Y axis]', value: 'Zoom in Out ' },
        { key: 'Shift + [Drag X axis]', value: 'perspective FOV control ' },
        { key: '[Right Drag]', value: 'View Projection Movement ', css: 'mb-005 c-tblue' },

        { key: 'Ctrl + Z', value: 'undo ' },
        { key: 'Ctrl + Shift + Z', value: 'redo ', css: 'mb-005' },

        { key: 'Ctrl + [Right Drag]', value: 'move Content ' },
        { key: 'Ctrl + Shift + [Right Drag]', value: 'move Content ', css: 'mb-005' },

        { key: 'Ctrl + [Drag]', value: ' ' },
        { key: 'Ctrl + Shift+ [Drag]', value: ' ', css: 'mb-005' },

        { key: 'Ctrl + Shift+ Space', value: 'change Current Surface', css: 'mb-005 c-tblue' },

    ];
</script>
/// main content
<div class="graytr rt  sec-t  rad-05 m-00 mb-005 mt-005 p-00 h-full w-full rad-05 f f-c f-at f-ct f-js">

    <div class="ab w-01 h-01 ns r-n01 ">
        <div class="icon  fs-05 c-torg prm-t-h">info</div>
        <div class="ab l-005 t-005   graytr p-0025 rad-05 sub-f f f-r f-w f-at f-ct f-js">
            <repeater params="$$_help">
                <div class='f f-r f-nw f-at f-ct f-js bb-i-01 c-b-itrwhite2 $$css'>
                    <div class="w-05">$$key</div>
                    <div class="w-05">$$value</div>
                </div>
            </repeater>
        </div>
    </div>
    <div class="rt h-p10 ns  graytr rad-t-05  ">
        <div class="ab h-p50 l-n0025 sub-f   t-p50 w-mx-00 h-mx-00 f-center rotn90">
            helpers
        </div>
        <iloader page="item" path="/src/coms/"
            params="{click:' _$$TID_create()',icon:'settings',text:'Parameters',css:'$$itemDefaultCss'}"></iloader>
        <iloader page="item" path="/src/coms/"
            params="{click:' _$$TID_upload()',icon:'deployed_code',text:'import glb',css:'$$itemHelperCss'}"></iloader>
    </div>

    <div class="rt h-p30 ns ">
        <div class="ab h-p50 l-n0025 sub-f  t-p50 w-mx-00 h-mx-00 f-center rotn90">
            create
        </div>
        <div class="mt-0025"></div>
        <iloader page="item" path="/src/coms/"
            params="{click:' _$$TID_create()',icon:'line_curve',text:'3D Curve',css:'$$itemDefaultCss'}"></iloader>
        <div class="m-0025 ctrwhite2 rad-05 fs-01 h-0005"></div>
        <iloader page="item" path="/src/coms/"
            params="{click:' _$$TID_helperFace()',icon:'check_box_outline_blank',text:'Face',css:'$$itemHelperCss'}">
        </iloader> 
        <iloader page="item" path="/src/coms/"
            params="{click:' _$$TID_helperFace()',icon:'line_start_circle',text:'Node',css:'$$itemHelperCss'}" >
        </iloader>

    </div>
    <div class="rt h-p70 ns items  graytr">
        <div class="ab h-p50 l-n0025  sub-f t-p50 w-mx-00 h-mx-00 f-center rotn90">
            items
        </div>
    </div>
    <div class="rt h-p10 ns rad-b-05">
        <div class="ab h-p50 l-n0025 sub-f  t-p50 w-mx-00 h-mx-00 f-center rotn90">
            publish
        </div>
    </div>

</div>
/// background script
<script>

    var _rim_iden = 0;
    var _rim_sel = 0;
    var _rims = [];
    var _rimsModel = [];

    _saveRim = function () {

        localStorage['_rim_iden' + (location.search)] = JSON.stringify(_rims);

    }
    _clearRim = function () {

        localStorage['_rim_iden' + (location.search)] = JSON.stringify({});
        location.reload();

    }

    _rim_getPoints = function (model) {

        var dt = [];

        for (var i in model) {

            if (i.startsWith('pt_')) {
                dt[i.split('_')[1]] = {
                    x: model[i].position.x,
                    y: model[i].position.y,
                    z: model[i].position.z,
                    p1: {
                        x: model[i].p1.position.x,
                        y: model[i].p1.position.y,
                        z: model[i].p1.position.z
                    },
                    p2: {
                        x: model[i].p2.position.x,
                        y: model[i].p2.position.y,
                        z: model[i].p2.position.z
                    },

                };

            }

        }

    };

    _loadRim = function () {

        try {
            if (localStorage['_rim_iden' + (location.search)]) {
                _rims = JSON.parse(localStorage['_rim_iden' + (location.search)]);

                for (var i in _rims) {
                    _rim_iden = i;
                    if (_rims[i] && !_rims[i].deleted)
                        _$$TID_create(i);

                }
            }
        } catch (e) { console.log('Error Storage', e); }

    }



    var _$$TID_change = function (th) {
        var iden = parent2(th).id.split('_')[1].valueOf() * 1;
        _rims[iden].name = th.value;

        _saveRim();
    }


    var _$$TID_delete = function (th) {
        if (confirm('are you wanna remove item?')) {
            var iden = parent2(th).id.split('_')[1].valueOf() * 1;
            _rims[iden] = { deleted: 1 };
            parent2(th).remove();
            _saveRim();

        }

    }

    var _$$TID_Select = function (iden) {

        if (iden != 0) {
            main3D.helper_click = function (x, y, p) {

                if (p.hit) {

                    if (!main3D.point_h) {
                        main3D.point_h = main3D.maker({ seg: 10, radius: 0.01 }, GB.models.sphare, function (me) {
                            me.Solid({ r: 1,g: 0.8,b:0.3 })
                                .Event(2, 'result.xyz = vec3(1.,0.5,0.);')
                                .Event(3, 'result.xyz = vec3(1.,1.0,0.);')

                                ; return me
                        });
                        main3D.point_h.visibility = 0;
                        main3D.point_h.isPickable = 0;
                    }

                    if (!main3D.point_t) {
                        main3D.point_t = main3D.maker({ seg: 10, radius: 0.008 }, GB.models.sphare, function (me) {
                            me.Solid({r: .7,g: .7,b:.5 })
                                .Event(2, 'result.xyz = vec3(1.,0.5,0.);')
                                .Event(3, 'result.xyz = vec3(1.,1.0,0.);')

                                ; return me
                        });

                        main3D.point_t.visibility = 0;
                        main3D.point_t.isPickable = 0;

                        main3D.point_t2 = main3D.maker({ seg: 10, radius: 0.008 }, GB.models.sphare, function (me) {
                            me.Solid({r: .5,g: .7,b:.7 })
                                .Event(2, 'result.xyz = vec3(1.,0.5,0.);')
                                .Event(3, 'result.xyz = vec3(1.,1.0,0.);')

                                ; return me
                        });

                        main3D.point_t2.visibility = 0;
                        main3D.point_t2.isPickable = 0;

                        main3D.point_l = main3D.maker({s:10, d: 1, w: 0.0015, h: 0.0015, x: 0., y: 0. , z: 1.0  }, GB.models.column, function (me) {
                            me.Solid({ r: 1, g: 1, b: 1, a: 0.2 })
                            .Transparency()
                                ; return me
                        });

                        main3D.point_l.visibility = 0;
                        main3D.point_l.isPickable = 0;

                    }

                    if (!_rimsModel[iden]) _rimsModel[iden] = {
                        index: 0,

                    };

                    var pickNormal = p.getNormal(true /** world normal */);


                    var model = main3D.point_h.clone();
                    model.visibility = 1;
                    model.isPickable = 1;
                    model.dragable = 1;
                    model.isPoint = 1;

                    model.p1 = main3D.point_t.clone();
                    model.p1_line = main3D.point_l.clone();
                    model.p2 = main3D.point_t2.clone();
                    model.p2_line = main3D.point_l.clone();

                    model.p1.isPoint = 1;
                    model.p2.isPoint = 1;

                    model.p1.left = 1;
                    model.p1.isSub = 1;
                    model.p2.right = 1;
                    model.p2.isSub = 1;

                    model.updateLines = function (model) {
                        var p1 = {
                            x: model.p1.position.x,
                            y: model.p1.position.y,
                            z: model.p1.position.z
                        };
                        var lp1 = pow(pow(p1.x) + pow(p1.y) + pow(p1.z), 0.5);
                        model.p1_line.scaling.z = lp1 ;

                        var p2 = {
                            x: model.p2.position.x,
                            y: model.p2.position.y,
                            z: model.p2.position.z
                        };
                        var lp2 = pow(pow(p2.x) + pow(p2.y) + pow(p2.z), 0.5);
                         model.p2_line.scaling.z = lp2 ;

                        model.p1_line.lookAt(model.p1.position);
                        model.p2_line.lookAt(model.p2.position);
                    };

                    model.p1.visibility = 1;
                    model.p1_line.visibility = 1;
                    model.p1.isPickable = 1;
                    model.p1.dragable = 1;
                    model.p1.position.x = .015;
                    model.p1.solid = true;

                    model.p2.visibility = 1;
                    model.p2_line.visibility = 1;
                    model.p2.isPickable = 1;
                    model.p2.dragable = 1;
                    model.p2.position.x =  0.015;
                    model.p2.position.z =  0.005;
                    model.p2.solid = true;

                    model.p1.parent = model;
                    model.p2.parent = model;
                    model.p1_line.parent = model;
                    model.p2_line.parent = model;

                    model.position.x = p.pickedPoint.x;
                    model.position.y = p.pickedPoint.y;
                    model.position.z = p.pickedPoint.z;

                    model.updateLines(model);  

                    _rimsModel[iden].index++;  

                    model.index = _rimsModel[iden].index;
                    model.iden =  iden ;
                    


                    

                                    
                                        
                    _rimsModel[iden][ (_rimsModel[iden].index/1000).toFixed(16) ] = model;

                    GB.updateConnect(main3D.scene,
                     _rimsModel[iden],
                      (_rimsModel[iden].index/1000).toFixed(16));
                }

            };
        }
    }

    var _$$TID_call = function (th) {

        var iden = th.id.split('_')[1].valueOf() * 1;

        _rims[iden] = def(_rims[iden], {});

        var _form = {
            PID: iden,
            path: '/src/coms/',
            page: 'json',
            css: 'w-full f f-c f-at f-ct f-js',
            items: {
                seg: {
                    PID: iden,
                    title: 'segment',
                    type: 'range',
                    min: 10,
                    max: 100,
                    step: 1,
                    input: function (value) {

                        _rims[iden]['seg'] = value;
                        _saveRim()
                    },
                    value: def(_rims[iden]['seg'], 0)
                }
            }
        };


        if (_rim_sel == iden) {
            _rim_sel = 0;
            _$$TID_Select(0);
            th.classList.remove('c-iorg');

            first('.properties').innerHTML = '';

        } else {
            _rim_sel = iden;
            _$$TID_Select(iden);
            all('.__item', function (at) {
                at.classList.remove('c-iorg');
            }
                , function () {
                    th.classList.add('c-iorg');
                    dyHtml.loader(first('.properties'), _form);
                });
        }

    }

    var _$$TID_create = function (id) {

        if (!id)
            setTimeout(() => {
                if (first('#iden_' + _rim_iden))
                    _$$TID_call(first('#iden_' + _rim_iden))
            }, 500);

        id = id ? id : ++_rim_iden;

        _rims[id] = def(_rims[id], { name: ' ... ' });

        dyHtml.append(first('.items'), {
            iden: id, type: 1,
            delete: '_$$TID_delete( this);',
            change: '_$$TID_change( this);',
            click: '_$$TID_call( this);',
            icon: 'line_curve', text: _rims[id].name,
            css: '__item c-htrwhite2 mb-0005 rad-05 prm-t-h sec-t'
        }, 'item', '/src/coms/');

        _saveRim();

    };

</script>